generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]

  @@map("auth_users")
}

model Event {
  id                 String          @id @default(uuid())
  userId             String
  title              String
  description        String?
  eventDate          DateTime
  backgroundImageUrl String?
  primaryColor       String?
  accentColor        String?
  fontFamily         String?
  flyerImageUrl      String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  emailReminders     EmailReminder[]
  user               User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses          FormResponse[]
  sections           FormSection[]

  @@map("events")
}

model FormSection {
  id          String      @id @default(uuid())
  eventId     String
  title       String
  description String?
  orderIndex  Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  fields      FormField[]
  event       Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("form_sections")
}

model FormField {
  id          String      @id @default(uuid())
  sectionId   String
  type        String
  label       String
  placeholder String?
  required    Boolean     @default(false)
  options     String?
  orderIndex  Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  section     FormSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@map("form_fields")
}

model FormResponse {
  id              String    @id @default(uuid())
  eventId         String
  respondentName  String
  respondentEmail String?
  responses       String
  checkedIn       Boolean   @default(false)
  checkedInAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  event           Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("form_responses")
}

model EmailReminder {
  id           String    @id @default(uuid())
  eventId      String
  templateName String
  subject      String
  body         String
  scheduledFor DateTime?
  sentAt       DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  event        Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("email_reminders")
}

model FormTemplate {
  id           String   @id @default(uuid())
  name         String
  description  String?
  templateData String
  isPublic     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("form_templates")
}
